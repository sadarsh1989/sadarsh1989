// Example input data with INS segments
const fileData = `INS*1*18*0*0*0*1~
REF*0F*123456789~
N3*1234 Elm St*Suite 567~
N3*5678 Oak Rd~
INS*2*18*0*0*0*2~
REF*0F*987654321~
N3*1234 Pine Ave~
N3*5678 Birch Ln~
N3*1234 Pine Ave~ // Duplicate N3 segment
INS*3*18*0*0*0*3~
REF*0F*987987987~
N3*5678 Oak Rd~
`;

// Function to remove duplicate N3 segments under each INS segment
function removeDuplicateN3Segments(fileData) {
  const insSegments = [];
  const segments = fileData.split("~");
  let currentInsSegment = null;

  // Iterate through each segment in the file
  for (const segment of segments) {
    const segmentFields = segment.split("*");
    const segmentIdentifier = segmentFields[0];

    // If segment is an INS segment, update currentInsSegment
    if (segmentIdentifier === "INS") {
      if (currentInsSegment) {
        insSegments.push(currentInsSegment);
      }
      currentInsSegment = {
        segment: segment,
        n3Segments: new Set(), // Use Set to store unique N3 segments
      };
    }

    // If segment is an N3 segment, add it to currentInsSegment's n3Segments set
    if (segmentIdentifier === "N3" && currentInsSegment) {
      currentInsSegment.n3Segments.add(segment);
    }
  }

  // Push the last INS segment after loop ends
  if (currentInsSegment) {
    insSegments.push(currentInsSegment);
  }

  // Iterate through each INS segment and remove duplicate N3 segments
  for (const insSegment of insSegments) {
    // Convert Set of unique N3 segments back to an array
    const uniqueN3Segments = Array.from(insSegment.n3Segments);
    // Replace N3 segments (including segment delimiter "~") in the fileData with empty string
    for (const n3Segment of uniqueN3Segments) {
      fileData = fileData.replace(new RegExp(`${n3Segment}~`, "g"), "");
    }
  }

  return fileData;
}

const updatedFileData = removeDuplicateN3Segments(fileData);
console.log(updatedFileData);
